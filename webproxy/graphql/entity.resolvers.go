package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.27

import (
	"context"

	"github.com/vediagames/platform/gateway/graphql/model"
	"github.com/vediagames/platform/webproxy/graphql/generated"
)

// Tags is the resolver for the tags field.
func (r *gameResolver) Tags(ctx context.Context, obj *model.Game) (*model.Tags, error) {
	return r.gatewayResolver.Game().Tags(ctx, obj)
}

// Categories is the resolver for the categories field.
func (r *gameResolver) Categories(ctx context.Context, obj *model.Game) (*model.Categories, error) {
	return r.gatewayResolver.Game().Categories(ctx, obj)
}

// Tags is the resolver for the tags field.
func (r *sectionResolver) Tags(ctx context.Context, obj *model.Section) (*model.Tags, error) {
	return r.gatewayResolver.Section().Tags(ctx, obj)
}

// Categories is the resolver for the categories field.
func (r *sectionResolver) Categories(ctx context.Context, obj *model.Section) (*model.Categories, error) {
	return r.gatewayResolver.Section().Categories(ctx, obj)
}

// Games is the resolver for the games field.
func (r *sectionResolver) Games(ctx context.Context, obj *model.Section) (*model.Games, error) {
	return r.gatewayResolver.Section().Games(ctx, obj)
}

// Game returns generated.GameResolver implementation.
func (r *Resolver) Game() generated.GameResolver { return &gameResolver{r} }

// Section returns generated.SectionResolver implementation.
func (r *Resolver) Section() generated.SectionResolver { return &sectionResolver{r} }

type gameResolver struct{ *Resolver }
type sectionResolver struct{ *Resolver }
