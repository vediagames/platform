package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/vediagames/vediagames.com/gateway/graphql/generated"
	"github.com/vediagames/vediagames.com/gateway/graphql/model"
	notificationdomain "github.com/vediagames/vediagames.com/notification/domain"
)

// SendEmail is the resolver for the sendEmail field.
func (r *mutationResolver) SendEmail(ctx context.Context, request model.SendEmailRequest) (*bool, error) {
	err := r.emailClient.Email(ctx, notificationdomain.EmailRequest{
		To: notificationdomain.User{
			Email: "antonio.jelic@vediagames.com",
			Name:  "Antonio Jelic",
		},
		From: notificationdomain.User{
			Email: request.From,
			Name:  "vediagames.com Contact form",
		},
		Name:    request.Name,
		Subject: request.Subject,
		Body:    request.Body,
	})
	if err != nil {
		return nil, fmt.Errorf("failed to email: %w", err)
	}

	return pointerTrue(), nil
}

// MostPlayedGames is the resolver for the mostPlayedGames field.
func (r *queryResolver) MostPlayedGames(ctx context.Context, request model.MostPlayedGamesRequest) (*model.MostPlayedGamesResponse, error) {
	panic(fmt.Errorf("not implemented: MostPlayedGames - mostPlayedGames"))
}

// FreshGames is the resolver for the freshGames field.
func (r *queryResolver) FreshGames(ctx context.Context, request model.FreshGamesRequest) (*model.FreshGamesResponse, error) {
	panic(fmt.Errorf("not implemented: FreshGames - freshGames"))
}

// Games is the resolver for the games field.
func (r *queryResolver) Games(ctx context.Context, request model.GamesRequest) (*model.GamesResponse, error) {
	panic(fmt.Errorf("not implemented: Games - games"))
}

// Game is the resolver for the game field.
func (r *queryResolver) Game(ctx context.Context, request model.GameRequest) (*model.GameResponse, error) {
	panic(fmt.Errorf("not implemented: Game - game"))
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context, request model.CategoriesRequest) (*model.CategoriesResponse, error) {
	panic(fmt.Errorf("not implemented: Categories - categories"))
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, request model.CategoryRequest) (*model.CategoryResponse, error) {
	panic(fmt.Errorf("not implemented: Category - category"))
}

// Tags is the resolver for the tags field.
func (r *queryResolver) Tags(ctx context.Context, request model.TagsRequest) (*model.TagsResponse, error) {
	panic(fmt.Errorf("not implemented: Tags - tags"))
}

// Tag is the resolver for the tag field.
func (r *queryResolver) Tag(ctx context.Context, request model.TagRequest) (*model.TagResponse, error) {
	panic(fmt.Errorf("not implemented: Tag - tag"))
}

// Sections is the resolver for the sections field.
func (r *queryResolver) Sections(ctx context.Context, request model.SectionsRequest) (*model.SectionsResponse, error) {
	panic(fmt.Errorf("not implemented: Sections - sections"))
}

// Section is the resolver for the section field.
func (r *queryResolver) Section(ctx context.Context, request model.SectionRequest) (*model.SectionResponse, error) {
	panic(fmt.Errorf("not implemented: Section - section"))
}

// PlacedSections is the resolver for the placedSections field.
func (r *queryResolver) PlacedSections(ctx context.Context, request model.PlacedSectionsRequest) (*model.PlacedSectionsResponse, error) {
	panic(fmt.Errorf("not implemented: PlacedSections - placedSections"))
}

// Search is the resolver for the search field.
func (r *queryResolver) Search(ctx context.Context, request model.SearchRequest) (*model.SearchResponse, error) {
	panic(fmt.Errorf("not implemented: Search - search"))
}

// FullSearch is the resolver for the fullSearch field.
func (r *queryResolver) FullSearch(ctx context.Context, request model.FullSearchRequest) (*model.FullSearchResponse, error) {
	panic(fmt.Errorf("not implemented: FullSearch - fullSearch"))
}

// RandomProviderGame is the resolver for the randomProviderGame field.
func (r *queryResolver) RandomProviderGame(ctx context.Context) (*model.RandomProviderGameResponse, error) {
	panic(fmt.Errorf("not implemented: RandomProviderGame - randomProviderGame"))
}

// AvailableLanguages is the resolver for the availableLanguages field.
func (r *queryResolver) AvailableLanguages(ctx context.Context) (*model.AvailableLanguagesResponse, error) {
	panic(fmt.Errorf("not implemented: AvailableLanguages - availableLanguages"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
