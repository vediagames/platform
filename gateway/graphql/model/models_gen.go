// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AvailableLanguage struct {
	Code Language `json:"code"`
	Name string   `json:"name"`
}

type AvailableLanguagesResponse struct {
	Languages []*AvailableLanguage `json:"Languages"`
}

type Categories struct {
	Data  []*Category `json:"data"`
	Total int         `json:"total"`
}

type CategoriesRequest struct {
	Language       Language `json:"language"`
	Page           int      `json:"page"`
	Limit          int      `json:"limit"`
	AllowDeleted   bool     `json:"allowDeleted"`
	AllowInvisible bool     `json:"allowInvisible"`
}

type CategoriesResponse struct {
	Categories *Categories `json:"categories"`
}

type Category struct {
	ID               int      `json:"id"`
	Language         Language `json:"language"`
	Slug             string   `json:"slug"`
	Name             string   `json:"name"`
	ShortDescription *string  `json:"shortDescription"`
	Description      *string  `json:"description"`
	Content          *string  `json:"content"`
	Status           Status   `json:"status"`
	Clicks           int      `json:"clicks"`
	CreatedAt        string   `json:"createdAt"`
	DeletedAt        *string  `json:"deletedAt"`
	PublishedAt      *string  `json:"publishedAt"`
	PageURL          string   `json:"pageUrl"`
}

type CategoryRequest struct {
	Field    GetByField `json:"field"`
	Value    string     `json:"value"`
	Language Language   `json:"language"`
}

type CategoryResponse struct {
	Category *Category `json:"category"`
}

type FreshGamesRequest struct {
	Language Language `json:"language"`
	Page     int      `json:"page"`
	Limit    int      `json:"limit"`
	MaxDays  int      `json:"maxDays"`
}

type FreshGamesResponse struct {
	Games *Games `json:"games"`
}

type FullSearchRequest struct {
	Language       Language       `json:"language"`
	Query          string         `json:"query"`
	Page           int            `json:"page"`
	Limit          int            `json:"limit"`
	Sort           *SortingMethod `json:"sort"`
	AllowDeleted   bool           `json:"allowDeleted"`
	AllowInvisible bool           `json:"allowInvisible"`
}

type FullSearchResponse struct {
	SearchItems []*SearchItem `json:"searchItems"`
	Total       int           `json:"total"`
}

type Game struct {
	ID                int         `json:"id"`
	Language          Language    `json:"language"`
	Slug              string      `json:"slug"`
	Name              string      `json:"name"`
	Status            Status      `json:"status"`
	CreatedAt         string      `json:"createdAt"`
	DeletedAt         *string     `json:"deletedAt"`
	PublishedAt       *string     `json:"publishedAt"`
	URL               string      `json:"url"`
	Width             int         `json:"width"`
	Height            int         `json:"height"`
	ShortDescription  *string     `json:"shortDescription"`
	Description       *string     `json:"description"`
	Content           *string     `json:"content"`
	Likes             int         `json:"likes"`
	Dislikes          int         `json:"dislikes"`
	Plays             int         `json:"plays"`
	Weight            int         `json:"weight"`
	Player1Controls   *string     `json:"player1Controls"`
	Player2Controls   *string     `json:"player2Controls"`
	Tags              *Tags       `json:"tags"`
	Categories        *Categories `json:"categories"`
	Mobile            bool        `json:"mobile"`
	Thumbnail512x384  string      `json:"thumbnail512x384"`
	Thumbnail512x512  string      `json:"thumbnail512x512"`
	PageURL           string      `json:"pageUrl"`
	FullScreenPageURL string      `json:"fullScreenPageUrl"`
}

type GameRequest struct {
	Field    GetByField `json:"field"`
	Value    string     `json:"value"`
	Language Language   `json:"language"`
}

type GameResponse struct {
	Game *Game `json:"game"`
}

type Games struct {
	Data  []*Game `json:"data"`
	Total int     `json:"total"`
}

type GamesRequest struct {
	Language        Language       `json:"language"`
	Page            int            `json:"page"`
	Limit           int            `json:"limit"`
	AllowDeleted    bool           `json:"allowDeleted"`
	AllowInvisible  bool           `json:"allowInvisible"`
	Sort            *SortingMethod `json:"sort"`
	Categories      []int          `json:"categories"`
	Tags            []int          `json:"tags"`
	Ids             []int          `json:"ids"`
	ExcludedGameIDs []int          `json:"excludedGameIDs"`
}

type GamesResponse struct {
	Games *Games `json:"games"`
}

type MostPlayedGamesRequest struct {
	Language Language `json:"language"`
	Page     int      `json:"page"`
	Limit    int      `json:"limit"`
	MaxDays  int      `json:"maxDays"`
}

type MostPlayedGamesResponse struct {
	Games *Games `json:"games"`
}

type PlacedSection struct {
	Section   *Section `json:"section"`
	Placement int      `json:"placement"`
}

type PlacedSections struct {
	Data  []*PlacedSection `json:"data"`
	Total int              `json:"total"`
}

type PlacedSectionsRequest struct {
	Language Language `json:"language"`
}

type PlacedSectionsResponse struct {
	PlacedSections *PlacedSections `json:"placedSections"`
}

type RandomProviderGameResponse struct {
	Name        string   `json:"name"`
	URL         string   `json:"url"`
	Description string   `json:"description"`
	Controls    string   `json:"controls"`
	Mobile      bool     `json:"mobile"`
	Height      int      `json:"height"`
	Width       int      `json:"width"`
	Categories  []string `json:"categories"`
	Tags        []string `json:"tags"`
	Images      []string `json:"images"`
}

type SearchItem struct {
	ShortDescription string         `json:"shortDescription"`
	Name             string         `json:"name"`
	Slug             string         `json:"slug"`
	Type             SearchItemType `json:"type"`
	PageURL          string         `json:"pageUrl"`
	Thumbnail512x384 string         `json:"thumbnail512x384"`
}

type SearchRequest struct {
	Language       Language `json:"language"`
	Query          string   `json:"query"`
	MaxGames       int      `json:"maxGames"`
	MaxTags        int      `json:"maxTags"`
	AllowDeleted   bool     `json:"allowDeleted"`
	AllowInvisible bool     `json:"allowInvisible"`
}

type SearchResponse struct {
	SearchItems []*SearchItem `json:"searchItems"`
	Total       int           `json:"total"`
}

type Section struct {
	ID               int         `json:"id"`
	Language         Language    `json:"language"`
	Slug             string      `json:"slug"`
	Name             string      `json:"name"`
	Status           Status      `json:"status"`
	CreatedAt        string      `json:"createdAt"`
	DeletedAt        *string     `json:"deletedAt"`
	PublishedAt      *string     `json:"publishedAt"`
	ShortDescription *string     `json:"shortDescription"`
	Description      *string     `json:"description"`
	Content          *string     `json:"content"`
	Tags             *Tags       `json:"tags"`
	Categories       *Categories `json:"categories"`
	Games            *Games      `json:"games"`
	PageURL          string      `json:"pageUrl"`
}

type SectionRequest struct {
	Field    GetByField `json:"field"`
	Value    string     `json:"value"`
	Language Language   `json:"language"`
}

type SectionResponse struct {
	Section *Section `json:"section"`
}

type Sections struct {
	Data  []*Section `json:"data"`
	Total int        `json:"total"`
}

type SectionsRequest struct {
	Language       Language `json:"language"`
	Page           int      `json:"page"`
	Limit          int      `json:"limit"`
	AllowDeleted   bool     `json:"allowDeleted"`
	AllowInvisible bool     `json:"allowInvisible"`
}

type SectionsResponse struct {
	Sections *Sections `json:"sections"`
}

type SendEmailRequest struct {
	From    string `json:"from"`
	Name    string `json:"name"`
	Subject string `json:"subject"`
	Body    string `json:"body"`
}

type Tag struct {
	ID               int      `json:"id"`
	Language         Language `json:"language"`
	Slug             string   `json:"slug"`
	Name             string   `json:"name"`
	ShortDescription *string  `json:"shortDescription"`
	Description      *string  `json:"description"`
	Content          *string  `json:"content"`
	Status           Status   `json:"status"`
	Clicks           int      `json:"clicks"`
	CreatedAt        string   `json:"createdAt"`
	DeletedAt        *string  `json:"deletedAt"`
	PublishedAt      *string  `json:"publishedAt"`
	Thumbnail512x384 string   `json:"thumbnail512x384"`
	Thumbnail128x128 string   `json:"thumbnail128x128"`
	PageURL          string   `json:"pageUrl"`
}

type TagRequest struct {
	Field    GetByField `json:"field"`
	Value    string     `json:"value"`
	Language Language   `json:"language"`
}

type TagResponse struct {
	Tag *Tag `json:"tag"`
}

type TagSection struct {
	Games *Games `json:"games"`
	Tag   *Tag   `json:"tag"`
}

type TagSections struct {
	Data  []*TagSection `json:"data"`
	Total int           `json:"total"`
}

type Tags struct {
	Data  []*Tag `json:"data"`
	Total int    `json:"total"`
}

type TagsRequest struct {
	Language       Language          `json:"language"`
	Page           int               `json:"page"`
	Limit          int               `json:"limit"`
	AllowDeleted   bool              `json:"allowDeleted"`
	AllowInvisible bool              `json:"allowInvisible"`
	Sort           *TagSortingMethod `json:"sort"`
}

type TagsResponse struct {
	Tags *Tags `json:"tags"`
}

type GameReaction string

const (
	GameReactionNone    GameReaction = "None"
	GameReactionLike    GameReaction = "Like"
	GameReactionDislike GameReaction = "Dislike"
)

var AllGameReaction = []GameReaction{
	GameReactionNone,
	GameReactionLike,
	GameReactionDislike,
}

func (e GameReaction) IsValid() bool {
	switch e {
	case GameReactionNone, GameReactionLike, GameReactionDislike:
		return true
	}
	return false
}

func (e GameReaction) String() string {
	return string(e)
}

func (e *GameReaction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GameReaction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GameReaction", str)
	}
	return nil
}

func (e GameReaction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type GetByField string

const (
	GetByFieldID   GetByField = "id"
	GetByFieldSlug GetByField = "slug"
)

var AllGetByField = []GetByField{
	GetByFieldID,
	GetByFieldSlug,
}

func (e GetByField) IsValid() bool {
	switch e {
	case GetByFieldID, GetByFieldSlug:
		return true
	}
	return false
}

func (e GetByField) String() string {
	return string(e)
}

func (e *GetByField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = GetByField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid GetByField", str)
	}
	return nil
}

func (e GetByField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Language string

const (
	LanguageEn Language = "en"
	LanguageEs Language = "es"
)

var AllLanguage = []Language{
	LanguageEn,
	LanguageEs,
}

func (e Language) IsValid() bool {
	switch e {
	case LanguageEn, LanguageEs:
		return true
	}
	return false
}

func (e Language) String() string {
	return string(e)
}

func (e *Language) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Language(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Language", str)
	}
	return nil
}

func (e Language) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SearchItemType string

const (
	SearchItemTypeGame SearchItemType = "game"
	SearchItemTypeTag  SearchItemType = "tag"
)

var AllSearchItemType = []SearchItemType{
	SearchItemTypeGame,
	SearchItemTypeTag,
}

func (e SearchItemType) IsValid() bool {
	switch e {
	case SearchItemTypeGame, SearchItemTypeTag:
		return true
	}
	return false
}

func (e SearchItemType) String() string {
	return string(e)
}

func (e *SearchItemType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SearchItemType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SearchItemType", str)
	}
	return nil
}

func (e SearchItemType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SortingMethod string

const (
	SortingMethodID            SortingMethod = "id"
	SortingMethodName          SortingMethod = "name"
	SortingMethodRandom        SortingMethod = "random"
	SortingMethodMostPopular   SortingMethod = "most_popular"
	SortingMethodLeastPopular  SortingMethod = "least_popular"
	SortingMethodNewest        SortingMethod = "newest"
	SortingMethodOldest        SortingMethod = "oldest"
	SortingMethodMostLiked     SortingMethod = "most_liked"
	SortingMethodLeastLiked    SortingMethod = "least_liked"
	SortingMethodMostDisliked  SortingMethod = "most_disliked"
	SortingMethodLeastDisliked SortingMethod = "least_disliked"
	SortingMethodMostRelevant  SortingMethod = "most_relevant"
)

var AllSortingMethod = []SortingMethod{
	SortingMethodID,
	SortingMethodName,
	SortingMethodRandom,
	SortingMethodMostPopular,
	SortingMethodLeastPopular,
	SortingMethodNewest,
	SortingMethodOldest,
	SortingMethodMostLiked,
	SortingMethodLeastLiked,
	SortingMethodMostDisliked,
	SortingMethodLeastDisliked,
	SortingMethodMostRelevant,
}

func (e SortingMethod) IsValid() bool {
	switch e {
	case SortingMethodID, SortingMethodName, SortingMethodRandom, SortingMethodMostPopular, SortingMethodLeastPopular, SortingMethodNewest, SortingMethodOldest, SortingMethodMostLiked, SortingMethodLeastLiked, SortingMethodMostDisliked, SortingMethodLeastDisliked, SortingMethodMostRelevant:
		return true
	}
	return false
}

func (e SortingMethod) String() string {
	return string(e)
}

func (e *SortingMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SortingMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SortingMethod", str)
	}
	return nil
}

func (e SortingMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusInvisible Status = "invisible"
	StatusPublished Status = "published"
	StatusDeleted   Status = "deleted"
)

var AllStatus = []Status{
	StatusInvisible,
	StatusPublished,
	StatusDeleted,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusInvisible, StatusPublished, StatusDeleted:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TagSortingMethod string

const (
	TagSortingMethodID           TagSortingMethod = "id"
	TagSortingMethodName         TagSortingMethod = "name"
	TagSortingMethodRandom       TagSortingMethod = "random"
	TagSortingMethodMostPopular  TagSortingMethod = "most_popular"
	TagSortingMethodLeastPopular TagSortingMethod = "least_popular"
	TagSortingMethodNewest       TagSortingMethod = "newest"
	TagSortingMethodOldest       TagSortingMethod = "oldest"
)

var AllTagSortingMethod = []TagSortingMethod{
	TagSortingMethodID,
	TagSortingMethodName,
	TagSortingMethodRandom,
	TagSortingMethodMostPopular,
	TagSortingMethodLeastPopular,
	TagSortingMethodNewest,
	TagSortingMethodOldest,
}

func (e TagSortingMethod) IsValid() bool {
	switch e {
	case TagSortingMethodID, TagSortingMethodName, TagSortingMethodRandom, TagSortingMethodMostPopular, TagSortingMethodLeastPopular, TagSortingMethodNewest, TagSortingMethodOldest:
		return true
	}
	return false
}

func (e TagSortingMethod) String() string {
	return string(e)
}

func (e *TagSortingMethod) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TagSortingMethod(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TagSortingMethod", str)
	}
	return nil
}

func (e TagSortingMethod) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
